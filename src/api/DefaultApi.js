/**
 * traccar
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Attribute', 'model/Calendar', 'model/Command', 'model/CommandType', 'model/Device', 'model/DeviceTotalDistance', 'model/Driver', 'model/Event', 'model/Geofence', 'model/Group', 'model/Maintenance', 'model/Notification', 'model/NotificationType', 'model/Permission', 'model/Position', 'model/ReportStops', 'model/ReportSummary', 'model/ReportTrips', 'model/Server', 'model/Statistics', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Attribute'), require('../model/Calendar'), require('../model/Command'), require('../model/CommandType'), require('../model/Device'), require('../model/DeviceTotalDistance'), require('../model/Driver'), require('../model/Event'), require('../model/Geofence'), require('../model/Group'), require('../model/Maintenance'), require('../model/Notification'), require('../model/NotificationType'), require('../model/Permission'), require('../model/Position'), require('../model/ReportStops'), require('../model/ReportSummary'), require('../model/ReportTrips'), require('../model/Server'), require('../model/Statistics'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.Traccar) {
      root.Traccar = {};
    }
    root.Traccar.DefaultApi = factory(root.Traccar.ApiClient, root.Traccar.Attribute, root.Traccar.Calendar, root.Traccar.Command, root.Traccar.CommandType, root.Traccar.Device, root.Traccar.DeviceTotalDistance, root.Traccar.Driver, root.Traccar.Event, root.Traccar.Geofence, root.Traccar.Group, root.Traccar.Maintenance, root.Traccar.Notification, root.Traccar.NotificationType, root.Traccar.Permission, root.Traccar.Position, root.Traccar.ReportStops, root.Traccar.ReportSummary, root.Traccar.ReportTrips, root.Traccar.Server, root.Traccar.Statistics, root.Traccar.User);
  }
}(this, function(ApiClient, Attribute, Calendar, Command, CommandType, Device, DeviceTotalDistance, Driver, Event, Geofence, Group, Maintenance, Notification, NotificationType, Permission, Position, ReportStops, ReportSummary, ReportTrips, Server, Statistics, User) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 4.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the attributesComputedGet operation.
     * @callback module:api/DefaultApi~attributesComputedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Attributes
     * Without params, it returns a list of Attributes the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} opts.groupId Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} opts.refresh 
     * @param {module:api/DefaultApi~attributesComputedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attribute>}
     */
    this.attributesComputedGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Attribute];

      return this.apiClient.callApi(
        '/attributes/computed', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attributesComputedIdDelete operation.
     * @callback module:api/DefaultApi~attributesComputedIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Attribute
     * @param {Number} id 
     * @param {module:api/DefaultApi~attributesComputedIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.attributesComputedIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributesComputedIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/attributes/computed/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attributesComputedIdPut operation.
     * @callback module:api/DefaultApi~attributesComputedIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Attribute
     * @param {Number} id 
     * @param {module:model/Attribute} body 
     * @param {module:api/DefaultApi~attributesComputedIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.attributesComputedIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributesComputedIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling attributesComputedIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/attributes/computed/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attributesComputedPost operation.
     * @callback module:api/DefaultApi~attributesComputedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Attribute
     * @param {module:model/Attribute} body 
     * @param {module:api/DefaultApi~attributesComputedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    this.attributesComputedPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling attributesComputedPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Attribute;

      return this.apiClient.callApi(
        '/attributes/computed', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsGet operation.
     * @callback module:api/DefaultApi~calendarsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Calendar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Calendars
     * Without params, it returns a list of Calendars the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {module:api/DefaultApi~calendarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Calendar>}
     */
    this.calendarsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Calendar];

      return this.apiClient.callApi(
        '/calendars', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsIdDelete operation.
     * @callback module:api/DefaultApi~calendarsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Calendar
     * @param {Number} id 
     * @param {module:api/DefaultApi~calendarsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calendarsIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling calendarsIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calendars/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsIdPut operation.
     * @callback module:api/DefaultApi~calendarsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calendar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Calendar
     * @param {Number} id 
     * @param {module:model/Calendar} body 
     * @param {module:api/DefaultApi~calendarsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Calendar}
     */
    this.calendarsIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling calendarsIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling calendarsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Calendar;

      return this.apiClient.callApi(
        '/calendars/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsPost operation.
     * @callback module:api/DefaultApi~calendarsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calendar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Calendar
     * @param {module:model/Calendar} body 
     * @param {module:api/DefaultApi~calendarsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Calendar}
     */
    this.calendarsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling calendarsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Calendar;

      return this.apiClient.callApi(
        '/calendars', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsGet operation.
     * @callback module:api/DefaultApi~commandsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Command>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Saved Commands
     * Without params, it returns a list of Drivers the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} opts.groupId Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} opts.refresh 
     * @param {module:api/DefaultApi~commandsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Command>}
     */
    this.commandsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Command];

      return this.apiClient.callApi(
        '/commands', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsIdDelete operation.
     * @callback module:api/DefaultApi~commandsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Saved Command
     * @param {Number} id 
     * @param {module:api/DefaultApi~commandsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.commandsIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commandsIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/commands/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsIdPut operation.
     * @callback module:api/DefaultApi~commandsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Saved Command
     * @param {Number} id 
     * @param {module:model/Command} body 
     * @param {module:api/DefaultApi~commandsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.commandsIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commandsIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commandsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsPost operation.
     * @callback module:api/DefaultApi~commandsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Saved Command
     * @param {module:model/Command} body 
     * @param {module:api/DefaultApi~commandsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.commandsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commandsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsSendGet operation.
     * @callback module:api/DefaultApi~commandsSendGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Command>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Saved Commands supported by Device at the moment
     * Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support
     * @param {Object} opts Optional parameters
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {module:api/DefaultApi~commandsSendGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Command>}
     */
    this.commandsSendGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'deviceId': opts['deviceId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Command];

      return this.apiClient.callApi(
        '/commands/send', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsSendPost operation.
     * @callback module:api/DefaultApi~commandsSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispatch commands to device
     * Dispatch a new command or Saved Command if _body.id_ set
     * @param {module:model/Command} body 
     * @param {module:api/DefaultApi~commandsSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    this.commandsSendPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commandsSendPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Command;

      return this.apiClient.callApi(
        '/commands/send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsTypesGet operation.
     * @callback module:api/DefaultApi~commandsTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommandType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of available Commands for the Device or all possible Commands if Device ommited
     * @param {Object} opts Optional parameters
     * @param {Number} opts.deviceId 
     * @param {Boolean} opts.textChannel 
     * @param {module:api/DefaultApi~commandsTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommandType>}
     */
    this.commandsTypesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'deviceId': opts['deviceId'],
        'textChannel': opts['textChannel'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CommandType];

      return this.apiClient.callApi(
        '/commands/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGet operation.
     * @callback module:api/DefaultApi~devicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Devices
     * Without any params, returns a list of the user&#39;s devices
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.id To fetch one or more devices. Multiple params can be passed like &#x60;id&#x3D;31&amp;id&#x3D;42&#x60;
     * @param {String} opts.uniqueId To fetch one or more devices. Multiple params can be passed like &#x60;uniqueId&#x3D;333331&amp;uniqieId&#x3D;44442&#x60;
     * @param {module:api/DefaultApi~devicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    this.devicesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'id': opts['id'],
        'uniqueId': opts['uniqueId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Device];

      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesIdDelete operation.
     * @callback module:api/DefaultApi~devicesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Device
     * @param {Number} id 
     * @param {module:api/DefaultApi~devicesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.devicesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesIdDistancePut operation.
     * @callback module:api/DefaultApi~devicesIdDistancePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the distance counter of the Device
     * @param {Number} id 
     * @param {module:model/DeviceTotalDistance} body 
     * @param {module:api/DefaultApi~devicesIdDistancePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.devicesIdDistancePut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesIdDistancePut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesIdDistancePut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{id}/distance', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesIdPut operation.
     * @callback module:api/DefaultApi~devicesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Device
     * @param {Number} id 
     * @param {module:model/Device} body 
     * @param {module:api/DefaultApi~devicesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    this.devicesIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Device;

      return this.apiClient.callApi(
        '/devices/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesPost operation.
     * @callback module:api/DefaultApi~devicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Device
     * @param {module:model/Device} body 
     * @param {module:api/DefaultApi~devicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    this.devicesPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Device;

      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driversGet operation.
     * @callback module:api/DefaultApi~driversGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Driver>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Drivers
     * Without params, it returns a list of Drivers the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} opts.groupId Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} opts.refresh 
     * @param {module:api/DefaultApi~driversGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Driver>}
     */
    this.driversGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Driver];

      return this.apiClient.callApi(
        '/drivers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driversIdDelete operation.
     * @callback module:api/DefaultApi~driversIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Driver
     * @param {Number} id 
     * @param {module:api/DefaultApi~driversIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.driversIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling driversIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/drivers/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driversIdPut operation.
     * @callback module:api/DefaultApi~driversIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Driver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Driver
     * @param {Number} id 
     * @param {module:model/Driver} body 
     * @param {module:api/DefaultApi~driversIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Driver}
     */
    this.driversIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling driversIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling driversIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Driver;

      return this.apiClient.callApi(
        '/drivers/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driversPost operation.
     * @callback module:api/DefaultApi~driversPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Driver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Driver
     * @param {module:model/Driver} body 
     * @param {module:api/DefaultApi~driversPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Driver}
     */
    this.driversPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling driversPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Driver;

      return this.apiClient.callApi(
        '/drivers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsIdGet operation.
     * @callback module:api/DefaultApi~eventsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DefaultApi~eventsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.eventsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/events/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesGet operation.
     * @callback module:api/DefaultApi~geofencesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Geofence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Geofences
     * Without params, it returns a list of Geofences the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} opts.groupId Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} opts.refresh 
     * @param {module:api/DefaultApi~geofencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Geofence>}
     */
    this.geofencesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Geofence];

      return this.apiClient.callApi(
        '/geofences', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesIdDelete operation.
     * @callback module:api/DefaultApi~geofencesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Geofence
     * @param {Number} id 
     * @param {module:api/DefaultApi~geofencesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.geofencesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling geofencesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/geofences/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesIdPut operation.
     * @callback module:api/DefaultApi~geofencesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Geofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Geofence
     * @param {Number} id 
     * @param {module:model/Geofence} body 
     * @param {module:api/DefaultApi~geofencesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Geofence}
     */
    this.geofencesIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling geofencesIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling geofencesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Geofence;

      return this.apiClient.callApi(
        '/geofences/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesPost operation.
     * @callback module:api/DefaultApi~geofencesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Geofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Geofence
     * @param {module:model/Geofence} body 
     * @param {module:api/DefaultApi~geofencesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Geofence}
     */
    this.geofencesPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling geofencesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Geofence;

      return this.apiClient.callApi(
        '/geofences', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/DefaultApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Groups
     * Without any params, returns a list of the Groups the user belongs to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {module:api/DefaultApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    this.groupsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Group];

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdDelete operation.
     * @callback module:api/DefaultApi~groupsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Group
     * @param {Number} id 
     * @param {module:api/DefaultApi~groupsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.groupsIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdPut operation.
     * @callback module:api/DefaultApi~groupsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Group
     * @param {Number} id 
     * @param {module:model/Group} body 
     * @param {module:api/DefaultApi~groupsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    this.groupsIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Group;

      return this.apiClient.callApi(
        '/groups/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPost operation.
     * @callback module:api/DefaultApi~groupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Group
     * @param {module:model/Group} body 
     * @param {module:api/DefaultApi~groupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    this.groupsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Group;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the maintenancesGet operation.
     * @callback module:api/DefaultApi~maintenancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Maintenance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Maintenances
     * Without params, it returns a list of Maintenances the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} opts.groupId Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} opts.refresh 
     * @param {module:api/DefaultApi~maintenancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Maintenance>}
     */
    this.maintenancesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Maintenance];

      return this.apiClient.callApi(
        '/maintenances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the maintenancesIdDelete operation.
     * @callback module:api/DefaultApi~maintenancesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Maintenance
     * @param {Number} id 
     * @param {module:api/DefaultApi~maintenancesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.maintenancesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling maintenancesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/maintenances/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the maintenancesIdPut operation.
     * @callback module:api/DefaultApi~maintenancesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Maintenance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Maintenance
     * @param {Number} id 
     * @param {module:model/Maintenance} body 
     * @param {module:api/DefaultApi~maintenancesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Maintenance}
     */
    this.maintenancesIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling maintenancesIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling maintenancesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Maintenance;

      return this.apiClient.callApi(
        '/maintenances/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the maintenancesPost operation.
     * @callback module:api/DefaultApi~maintenancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Maintenance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Maintenance
     * @param {module:model/Maintenance} body 
     * @param {module:api/DefaultApi~maintenancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Maintenance}
     */
    this.maintenancesPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling maintenancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Maintenance;

      return this.apiClient.callApi(
        '/maintenances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsGet operation.
     * @callback module:api/DefaultApi~notificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Notifications
     * Without params, it returns a list of Notifications the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.all Can only be used by admins or managers to fetch all entities
     * @param {Number} opts.userId Standard users can use this only with their own _userId_
     * @param {Number} opts.deviceId Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} opts.groupId Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} opts.refresh 
     * @param {module:api/DefaultApi~notificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Notification>}
     */
    this.notificationsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Notification];

      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsIdDelete operation.
     * @callback module:api/DefaultApi~notificationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification
     * @param {Number} id 
     * @param {module:api/DefaultApi~notificationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.notificationsIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationsIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsIdPut operation.
     * @callback module:api/DefaultApi~notificationsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification
     * @param {Number} id 
     * @param {module:model/Notification} body 
     * @param {module:api/DefaultApi~notificationsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.notificationsIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling notificationsIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/notifications/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsPost operation.
     * @callback module:api/DefaultApi~notificationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification
     * @param {module:model/Notification} body 
     * @param {module:api/DefaultApi~notificationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.notificationsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/notifications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsTestPost operation.
     * @callback module:api/DefaultApi~notificationsTestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send test notification to current user via Email and SMS
     * @param {module:api/DefaultApi~notificationsTestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.notificationsTestPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/notifications/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsTypesGet operation.
     * @callback module:api/DefaultApi~notificationsTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of available Notification types
     * @param {module:api/DefaultApi~notificationsTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationType>}
     */
    this.notificationsTypesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NotificationType];

      return this.apiClient.callApi(
        '/notifications/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsDelete operation.
     * @callback module:api/DefaultApi~permissionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink an Object from another Object
     * @param {module:model/Permission} body 
     * @param {module:api/DefaultApi~permissionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.permissionsDelete = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionsDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permissions', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsPost operation.
     * @callback module:api/DefaultApi~permissionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link an Object to another Object
     * @param {module:model/Permission} body 
     * @param {module:api/DefaultApi~permissionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    this.permissionsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/permissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionsGet operation.
     * @callback module:api/DefaultApi~positionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Position>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a list of Positions
     * Without any params, it returns a list of last known positions for all the user&#39;s Devices. _from_ and _to_ fields are not required with _id_
     * @param {Object} opts Optional parameters
     * @param {Number} opts.deviceId _deviceId_ is optional, but requires the _from_ and _to_ parameters when used
     * @param {Date} opts.from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} opts.to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Number} opts.id To fetch one or more positions. Multiple params can be passed like &#x60;id&#x3D;31&amp;id&#x3D;42&#x60;
     * @param {module:api/DefaultApi~positionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Position>}
     */
    this.positionsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'deviceId': opts['deviceId'],
        'from': opts['from'],
        'to': opts['to'],
        'id': opts['id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json', 'text/csv', 'application/gpx+xml'];
      var accepts = ['application/json', 'text/csv', 'application/gpx+xml'];
      var returnType = [Position];

      return this.apiClient.callApi(
        '/positions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsEventsGet operation.
     * @callback module:api/DefaultApi~reportsEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Events within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.deviceId 
     * @param {Array.<Number>} opts.groupId 
     * @param {Array.<String>} opts.type % can be used to return events of all types
     * @param {module:api/DefaultApi~reportsEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.reportsEventsGet = function(from, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsEventsGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsEventsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': from,
        'to': to,
      };
      var collectionQueryParams = {
        'deviceId': {
          value: opts['deviceId'],
          collectionFormat: 'multi'
        },
        'groupId': {
          value: opts['groupId'],
          collectionFormat: 'multi'
        },
        'type': {
          value: opts['type'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/reports/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsRouteGet operation.
     * @callback module:api/DefaultApi~reportsRouteGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Position>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Positions within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.deviceId 
     * @param {Array.<Number>} opts.groupId 
     * @param {module:api/DefaultApi~reportsRouteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Position>}
     */
    this.reportsRouteGet = function(from, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsRouteGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsRouteGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': from,
        'to': to,
      };
      var collectionQueryParams = {
        'deviceId': {
          value: opts['deviceId'],
          collectionFormat: 'multi'
        },
        'groupId': {
          value: opts['groupId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = [Position];

      return this.apiClient.callApi(
        '/reports/route', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsStopsGet operation.
     * @callback module:api/DefaultApi~reportsStopsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportStops>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of ReportStops within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.deviceId 
     * @param {Array.<Number>} opts.groupId 
     * @param {module:api/DefaultApi~reportsStopsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportStops>}
     */
    this.reportsStopsGet = function(from, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsStopsGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsStopsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': from,
        'to': to,
      };
      var collectionQueryParams = {
        'deviceId': {
          value: opts['deviceId'],
          collectionFormat: 'multi'
        },
        'groupId': {
          value: opts['groupId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = [ReportStops];

      return this.apiClient.callApi(
        '/reports/stops', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsSummaryGet operation.
     * @callback module:api/DefaultApi~reportsSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of ReportSummary within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.deviceId 
     * @param {Array.<Number>} opts.groupId 
     * @param {module:api/DefaultApi~reportsSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportSummary>}
     */
    this.reportsSummaryGet = function(from, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsSummaryGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsSummaryGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': from,
        'to': to,
      };
      var collectionQueryParams = {
        'deviceId': {
          value: opts['deviceId'],
          collectionFormat: 'multi'
        },
        'groupId': {
          value: opts['groupId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = [ReportSummary];

      return this.apiClient.callApi(
        '/reports/summary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsTripsGet operation.
     * @callback module:api/DefaultApi~reportsTripsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportTrips>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of ReportTrips within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.deviceId 
     * @param {Array.<Number>} opts.groupId 
     * @param {module:api/DefaultApi~reportsTripsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportTrips>}
     */
    this.reportsTripsGet = function(from, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsTripsGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsTripsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': from,
        'to': to,
      };
      var collectionQueryParams = {
        'deviceId': {
          value: opts['deviceId'],
          collectionFormat: 'multi'
        },
        'groupId': {
          value: opts['groupId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = [ReportTrips];

      return this.apiClient.callApi(
        '/reports/trips', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverGet operation.
     * @callback module:api/DefaultApi~serverGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Server} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Server information
     * @param {module:api/DefaultApi~serverGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Server}
     */
    this.serverGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Server;

      return this.apiClient.callApi(
        '/server', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the serverPut operation.
     * @callback module:api/DefaultApi~serverPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Server} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Server information
     * @param {module:model/Server} body 
     * @param {module:api/DefaultApi~serverPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Server}
     */
    this.serverPut = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling serverPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Server;

      return this.apiClient.callApi(
        '/server', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionDelete operation.
     * @callback module:api/DefaultApi~sessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close the Session
     * @param {module:api/DefaultApi~sessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sessionDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/session', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionGet operation.
     * @callback module:api/DefaultApi~sessionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Session information
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:api/DefaultApi~sessionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.sessionGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/session', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionPost operation.
     * @callback module:api/DefaultApi~sessionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Session
     * @param {String} email 
     * @param {String} password 
     * @param {module:api/DefaultApi~sessionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.sessionPost = function(email, password, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling sessionPost");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling sessionPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'password': password
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/session', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the statisticsGet operation.
     * @callback module:api/DefaultApi~statisticsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Statistics>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch server Statistics
     * @param {Date} from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {Date} to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
     * @param {module:api/DefaultApi~statisticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Statistics>}
     */
    this.statisticsGet = function(from, to, callback) {
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling statisticsGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling statisticsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': from,
        'to': to,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Statistics];

      return this.apiClient.callApi(
        '/statistics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/DefaultApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Users
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Can only be used by admin or manager users
     * @param {module:api/DefaultApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.usersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdDelete operation.
     * @callback module:api/DefaultApi~usersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User
     * @param {Number} id 
     * @param {module:api/DefaultApi~usersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdPut operation.
     * @callback module:api/DefaultApi~usersIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a User
     * @param {Number} id 
     * @param {module:model/User} body 
     * @param {module:api/DefaultApi~usersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersIdPut = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/DefaultApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a User
     * @param {module:model/User} body 
     * @param {module:api/DefaultApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
