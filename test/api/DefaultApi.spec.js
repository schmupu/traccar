/**
 * traccar
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Traccar);
  }
}(this, function(expect, Traccar) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Traccar.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('attributesComputedGet', function() {
      it('should call attributesComputedGet successfully', function(done) {
        //uncomment below and update the code to test attributesComputedGet
        //instance.attributesComputedGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributesComputedIdDelete', function() {
      it('should call attributesComputedIdDelete successfully', function(done) {
        //uncomment below and update the code to test attributesComputedIdDelete
        //instance.attributesComputedIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributesComputedIdPut', function() {
      it('should call attributesComputedIdPut successfully', function(done) {
        //uncomment below and update the code to test attributesComputedIdPut
        //instance.attributesComputedIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributesComputedPost', function() {
      it('should call attributesComputedPost successfully', function(done) {
        //uncomment below and update the code to test attributesComputedPost
        //instance.attributesComputedPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calendarsGet', function() {
      it('should call calendarsGet successfully', function(done) {
        //uncomment below and update the code to test calendarsGet
        //instance.calendarsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calendarsIdDelete', function() {
      it('should call calendarsIdDelete successfully', function(done) {
        //uncomment below and update the code to test calendarsIdDelete
        //instance.calendarsIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calendarsIdPut', function() {
      it('should call calendarsIdPut successfully', function(done) {
        //uncomment below and update the code to test calendarsIdPut
        //instance.calendarsIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calendarsPost', function() {
      it('should call calendarsPost successfully', function(done) {
        //uncomment below and update the code to test calendarsPost
        //instance.calendarsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsGet', function() {
      it('should call commandsGet successfully', function(done) {
        //uncomment below and update the code to test commandsGet
        //instance.commandsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsIdDelete', function() {
      it('should call commandsIdDelete successfully', function(done) {
        //uncomment below and update the code to test commandsIdDelete
        //instance.commandsIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsIdPut', function() {
      it('should call commandsIdPut successfully', function(done) {
        //uncomment below and update the code to test commandsIdPut
        //instance.commandsIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsPost', function() {
      it('should call commandsPost successfully', function(done) {
        //uncomment below and update the code to test commandsPost
        //instance.commandsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsSendGet', function() {
      it('should call commandsSendGet successfully', function(done) {
        //uncomment below and update the code to test commandsSendGet
        //instance.commandsSendGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsSendPost', function() {
      it('should call commandsSendPost successfully', function(done) {
        //uncomment below and update the code to test commandsSendPost
        //instance.commandsSendPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commandsTypesGet', function() {
      it('should call commandsTypesGet successfully', function(done) {
        //uncomment below and update the code to test commandsTypesGet
        //instance.commandsTypesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGet', function() {
      it('should call devicesGet successfully', function(done) {
        //uncomment below and update the code to test devicesGet
        //instance.devicesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesIdDelete', function() {
      it('should call devicesIdDelete successfully', function(done) {
        //uncomment below and update the code to test devicesIdDelete
        //instance.devicesIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesIdDistancePut', function() {
      it('should call devicesIdDistancePut successfully', function(done) {
        //uncomment below and update the code to test devicesIdDistancePut
        //instance.devicesIdDistancePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesIdPut', function() {
      it('should call devicesIdPut successfully', function(done) {
        //uncomment below and update the code to test devicesIdPut
        //instance.devicesIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesPost', function() {
      it('should call devicesPost successfully', function(done) {
        //uncomment below and update the code to test devicesPost
        //instance.devicesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('driversGet', function() {
      it('should call driversGet successfully', function(done) {
        //uncomment below and update the code to test driversGet
        //instance.driversGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('driversIdDelete', function() {
      it('should call driversIdDelete successfully', function(done) {
        //uncomment below and update the code to test driversIdDelete
        //instance.driversIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('driversIdPut', function() {
      it('should call driversIdPut successfully', function(done) {
        //uncomment below and update the code to test driversIdPut
        //instance.driversIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('driversPost', function() {
      it('should call driversPost successfully', function(done) {
        //uncomment below and update the code to test driversPost
        //instance.driversPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eventsIdGet', function() {
      it('should call eventsIdGet successfully', function(done) {
        //uncomment below and update the code to test eventsIdGet
        //instance.eventsIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('geofencesGet', function() {
      it('should call geofencesGet successfully', function(done) {
        //uncomment below and update the code to test geofencesGet
        //instance.geofencesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('geofencesIdDelete', function() {
      it('should call geofencesIdDelete successfully', function(done) {
        //uncomment below and update the code to test geofencesIdDelete
        //instance.geofencesIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('geofencesIdPut', function() {
      it('should call geofencesIdPut successfully', function(done) {
        //uncomment below and update the code to test geofencesIdPut
        //instance.geofencesIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('geofencesPost', function() {
      it('should call geofencesPost successfully', function(done) {
        //uncomment below and update the code to test geofencesPost
        //instance.geofencesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGet', function() {
      it('should call groupsGet successfully', function(done) {
        //uncomment below and update the code to test groupsGet
        //instance.groupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsIdDelete', function() {
      it('should call groupsIdDelete successfully', function(done) {
        //uncomment below and update the code to test groupsIdDelete
        //instance.groupsIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsIdPut', function() {
      it('should call groupsIdPut successfully', function(done) {
        //uncomment below and update the code to test groupsIdPut
        //instance.groupsIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsPost', function() {
      it('should call groupsPost successfully', function(done) {
        //uncomment below and update the code to test groupsPost
        //instance.groupsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('maintenancesGet', function() {
      it('should call maintenancesGet successfully', function(done) {
        //uncomment below and update the code to test maintenancesGet
        //instance.maintenancesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('maintenancesIdDelete', function() {
      it('should call maintenancesIdDelete successfully', function(done) {
        //uncomment below and update the code to test maintenancesIdDelete
        //instance.maintenancesIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('maintenancesIdPut', function() {
      it('should call maintenancesIdPut successfully', function(done) {
        //uncomment below and update the code to test maintenancesIdPut
        //instance.maintenancesIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('maintenancesPost', function() {
      it('should call maintenancesPost successfully', function(done) {
        //uncomment below and update the code to test maintenancesPost
        //instance.maintenancesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notificationsGet', function() {
      it('should call notificationsGet successfully', function(done) {
        //uncomment below and update the code to test notificationsGet
        //instance.notificationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notificationsIdDelete', function() {
      it('should call notificationsIdDelete successfully', function(done) {
        //uncomment below and update the code to test notificationsIdDelete
        //instance.notificationsIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notificationsIdPut', function() {
      it('should call notificationsIdPut successfully', function(done) {
        //uncomment below and update the code to test notificationsIdPut
        //instance.notificationsIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notificationsPost', function() {
      it('should call notificationsPost successfully', function(done) {
        //uncomment below and update the code to test notificationsPost
        //instance.notificationsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notificationsTestPost', function() {
      it('should call notificationsTestPost successfully', function(done) {
        //uncomment below and update the code to test notificationsTestPost
        //instance.notificationsTestPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notificationsTypesGet', function() {
      it('should call notificationsTypesGet successfully', function(done) {
        //uncomment below and update the code to test notificationsTypesGet
        //instance.notificationsTypesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsDelete', function() {
      it('should call permissionsDelete successfully', function(done) {
        //uncomment below and update the code to test permissionsDelete
        //instance.permissionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsPost', function() {
      it('should call permissionsPost successfully', function(done) {
        //uncomment below and update the code to test permissionsPost
        //instance.permissionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('positionsGet', function() {
      it('should call positionsGet successfully', function(done) {
        //uncomment below and update the code to test positionsGet
        //instance.positionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportsEventsGet', function() {
      it('should call reportsEventsGet successfully', function(done) {
        //uncomment below and update the code to test reportsEventsGet
        //instance.reportsEventsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportsRouteGet', function() {
      it('should call reportsRouteGet successfully', function(done) {
        //uncomment below and update the code to test reportsRouteGet
        //instance.reportsRouteGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportsStopsGet', function() {
      it('should call reportsStopsGet successfully', function(done) {
        //uncomment below and update the code to test reportsStopsGet
        //instance.reportsStopsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportsSummaryGet', function() {
      it('should call reportsSummaryGet successfully', function(done) {
        //uncomment below and update the code to test reportsSummaryGet
        //instance.reportsSummaryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportsTripsGet', function() {
      it('should call reportsTripsGet successfully', function(done) {
        //uncomment below and update the code to test reportsTripsGet
        //instance.reportsTripsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serverGet', function() {
      it('should call serverGet successfully', function(done) {
        //uncomment below and update the code to test serverGet
        //instance.serverGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serverPut', function() {
      it('should call serverPut successfully', function(done) {
        //uncomment below and update the code to test serverPut
        //instance.serverPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sessionDelete', function() {
      it('should call sessionDelete successfully', function(done) {
        //uncomment below and update the code to test sessionDelete
        //instance.sessionDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sessionGet', function() {
      it('should call sessionGet successfully', function(done) {
        //uncomment below and update the code to test sessionGet
        //instance.sessionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sessionPost', function() {
      it('should call sessionPost successfully', function(done) {
        //uncomment below and update the code to test sessionPost
        //instance.sessionPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('statisticsGet', function() {
      it('should call statisticsGet successfully', function(done) {
        //uncomment below and update the code to test statisticsGet
        //instance.statisticsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGet', function() {
      it('should call usersGet successfully', function(done) {
        //uncomment below and update the code to test usersGet
        //instance.usersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdDelete', function() {
      it('should call usersIdDelete successfully', function(done) {
        //uncomment below and update the code to test usersIdDelete
        //instance.usersIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdPut', function() {
      it('should call usersIdPut successfully', function(done) {
        //uncomment below and update the code to test usersIdPut
        //instance.usersIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersPost', function() {
      it('should call usersPost successfully', function(done) {
        //uncomment below and update the code to test usersPost
        //instance.usersPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
